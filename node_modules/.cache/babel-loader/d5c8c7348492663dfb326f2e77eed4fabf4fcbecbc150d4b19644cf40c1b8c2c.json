{"ast":null,"code":"// reducer.js\nimport { ADD_CONTACT, EDIT_CONTACT, REMOVE_CONTACT } from './actionTypes';\nconst initialState = {\n  contacts: JSON.parse(localStorage.getItem(\"contacts\")) || []\n};\nexport default function reducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case ADD_CONTACT:\n      {\n        let flag = 0;\n        if (action.payload.first_name == \"\" || action.payload.last_name == \"\" || action.payload.mob == \"\") {\n          alert('Please enter all correct value');\n          flag = 1;\n        } else {\n          state.contacts.forEach(el => {\n            if (el.first_name == action.payload.first_name && el.last_name == action.payload.last_name) {\n              alert('Already Exist');\n              flag = 1;\n            }\n          });\n        }\n        if (!flag) {\n          alert('');\n          let updatedContacts = JSON.parse(localStorage.getItem(\"contacts\")) || [];\n          updatedContacts.push({\n            id: state.contacts.length + 1,\n            ...action.payload\n          });\n          localStorage.setItem('contacts', JSON.stringify(updatedContacts));\n          return {\n            ...state,\n            contacts: [\n            // ...state.contacts,\n            // {\n            //   id: state.contacts.length + 1,\n            //  ...action.payload\n            // },\n            ...updatedContacts]\n          };\n        }\n      }\n    case REMOVE_CONTACT:\n      {\n        let Contacts = JSON.parse(localStorage.getItem(\"contacts\"));\n        let updatedContacts = Contacts.filter(el => el.id != action.payload.id);\n        localStorage.setItem('contacts', JSON.stringify(updatedContacts));\n        // console.log(localStorage.getItem(\"contacts\"))\n        return {\n          ...state,\n          contacts: [...updatedContacts]\n        };\n      }\n    case EDIT_CONTACT:\n      {\n        if (action.payload.first_name == \"\" || action.payload.last_name == \"\" || action.payload.mob == \"\") {\n          alert('Input Fields Can Not Be Leave Empty');\n          // flag=1\n          return state;\n        } else {\n          let flag = 0;\n          let Contacts = JSON.parse(localStorage.getItem(\"contacts\"));\n          Contacts.forEach(el => {\n            if (el.id != action.payload.id && el.first_name == action.payload.first_name && el.last_name == action.payload.last_name) {\n              alert(\"Name Already Exist!!\");\n              flag = 1;\n              return state;\n            }\n          });\n          if (flag) {\n            return state;\n          } else {\n            let updatedContacts = Contacts.map(el => {\n              if (el.id == action.payload.id) {\n                return el = {\n                  ...action.payload\n                };\n              } else {\n                return el;\n              }\n            });\n            localStorage.setItem(\"contacts\", JSON.stringify(updatedContacts));\n            alert('Contact has been Updated');\n            return {\n              ...state,\n              contacts: state.contacts.map(el => {\n                if (el.id == action.payload.id) {\n                  // console.log(action.payload)\n                  //  return  el={...action.payload}\n\n                  return el = {\n                    ...action.payload\n                  };\n                } else {\n                  return el;\n                }\n              })\n            };\n          }\n        }\n      }\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["ADD_CONTACT","EDIT_CONTACT","REMOVE_CONTACT","initialState","contacts","JSON","parse","localStorage","getItem","reducer","state","arguments","length","undefined","action","type","flag","payload","first_name","last_name","mob","alert","forEach","el","updatedContacts","push","id","setItem","stringify","Contacts","filter","map"],"sources":["C:/Users/SAHBAZ ANSHARI/Desktop/temp_taiyo/Taiyo_assignment/src/Redux/reducer.js"],"sourcesContent":["// reducer.js\nimport { ADD_CONTACT, EDIT_CONTACT, REMOVE_CONTACT } from './actionTypes';\n\n\nconst initialState = {\n  contacts:\n  \nJSON.parse(localStorage.getItem(\"contacts\"))||[],\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case ADD_CONTACT: { \n\n\n\n\n      let flag=0\n       if(action.payload.first_name==\"\"||action.payload.last_name==\"\"||action.payload.mob==\"\"){\n          alert('Please enter all correct value')\n        flag=1\n      }\n      else{\n     state.contacts.forEach((el)=>{\n        if(el.first_name==action.payload.first_name&&el.last_name==action.payload.last_name){\n            alert('Already Exist')\n            flag=1\n        }\n      \n      })\n      }\n \n\n      if(!flag){\n        alert('')\n       \n        let updatedContacts=JSON.parse(localStorage.getItem(\"contacts\"))||[]\n        updatedContacts.push({id:state.contacts.length+1,...action.payload})\n        localStorage.setItem('contacts',JSON.stringify(updatedContacts))\n          return {\n        ...state,\n        contacts: [\n          // ...state.contacts,\n          // {\n          //   id: state.contacts.length + 1,\n          //  ...action.payload\n          // },\n        ...updatedContacts],\n      };\n    \n    }\n\n      \n      }\n     \n    case REMOVE_CONTACT:{\n\n      let Contacts=JSON.parse(localStorage.getItem(\"contacts\"))\n     let updatedContacts=Contacts.filter((el)=>el.id!=action.payload.id)\n      localStorage.setItem('contacts',JSON.stringify(updatedContacts))\n      // console.log(localStorage.getItem(\"contacts\"))\n          return {\n        ...state,\n       \n        contacts:[...updatedContacts]\n      };\n   \n    }\n  \n    case EDIT_CONTACT: {\n\n      if(action.payload.first_name==\"\"||action.payload.last_name==\"\"||action.payload.mob==\"\"){\n        alert('Input Fields Can Not Be Leave Empty')\n        // flag=1\n        return state\n      }\n\n      else{\n\n      \n        let flag=0\n        let Contacts=JSON.parse(localStorage.getItem(\"contacts\"))\n\n        Contacts.forEach((el)=>{\n          if(el.id!=action.payload.id&&el.first_name==action.payload.first_name&&el.last_name==action.payload.last_name){\n            alert(\"Name Already Exist!!\")\n            flag=1\n            return state\n          }\n        })\n      \n        if(flag){\n          return state\n        }\n        else{\n           let  updatedContacts=Contacts.map((el)=>{\n          if(el.id==action.payload.id){\n            return  el={...action.payload}\n          }\n          else{\n            return el\n          }\n        })\n        localStorage.setItem(\"contacts\",JSON.stringify(updatedContacts))\n        alert('Contact has been Updated')\n           return {\n        ...state,\n        contacts: state.contacts.map((el)=>{\n          if(el.id==action.payload.id){\n            // console.log(action.payload)\n          //  return  el={...action.payload}\n\n            return el={...action.payload}\n          }\n          else{\n            return el\n          }\n      \n        }),\n      };\n        }\n     \n      }\n\n     \n      }\n      \n    default:\n      return state;\n  }\n  \n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}